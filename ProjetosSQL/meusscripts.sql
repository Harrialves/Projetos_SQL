CREATE DATABASE COMERCIO;

USE COMERCIO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M', 'F') NOT NULL,
	EMAILL VARCHAR(50) UNIQUE,
	CPF VARCHAR(15) UNIQUE
);

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30) NOT NULL,
	BAIRRO VARCHAR(30) NOT NULL,
	CIDADE VARCHAR(30) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	ID_CLIENTE INT UNIQUE,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);
CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('RES', 'COM', 'CEL') NOT NULL,
	NUMERO VARCHAR(10) UNIQUE NOT NULL,
	ID_CLIENTE INT,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);
 
 INSERT INTO CLIENTE VALUES(NULL, 'JOAO','M','JOAO@IG.COM','545451321');
 INSERT INTO CLIENTE VALUES(NULL, 'CARLOS','M','CARLOS@IG.COM','4234234423');
 INSERT INTO CLIENTE VALUES(NULL, 'ANA','F','ANA@IG.COM','234234234');
 INSERT INTO CLIENTE VALUES(NULL, 'CLARA','F',NULL,'34534234234');
 INSERT INTO CLIENTE VALUES(NULL, 'JORGE','M','JORGE@IG.COM','2345453424');
 INSERT INTO CLIENTE VALUES(NULL, 'CELIA','F','CELIA@IG.COM','2342566774');
 INSERT INTO CLIENTE VALUES(NULL, 'SAMARA','F','SAMARA@IG.COM','2332435567');

 SELECT * FROM CLIENTE;

 +-----------+--------+------+---------------+-------------+
| IDCLIENTE | NOME   | SEXO | EMAILL        | CPF         |
+-----------+--------+------+---------------+-------------+
|         1 | JOAO   | M    | JOAO@IG.COM   | 545451321   |
|         3 | CARLOS | M    | CARLOS@IG.COM | 4234234423  |
|         4 | ANA    | F    | ANA@IG.COM    | 234234234   |
|         5 | CLARA  | F    | NULL          | 34534234234 |
|         6 | JORGE  | M    | JORGE@IG.COM  | 2345453424  |
|         7 | CELIA  | F    | CELIA@IG.COM  | 2342566774  |
|         8 | SAMARA | F    | SAMARA@IG.COM | 2332435567  |
+-----------+--------+------+---------------+-------------+

INSERT INTO ENDERECO VALUES(NULL,'RUA ANTONIO SA', 'CENTRO', 'B. HORIZONTE', 'MG',4);
INSERT INTO ENDERECO VALUES(NULL,'RUA CAPITAO HERMES', 'CENTRO', 'RIO DE JANEIRO', 'RJ',1);
INSERT INTO ENDERECO VALUES(NULL,'RUA PRES VARGAS', 'JARDINS', 'SAO PAULO', 'SP',3);
INSERT INTO ENDERECO VALUES(NULL,'RUA ALFANDEGA', 'ESTACIO', 'RIO DE JANEIRO', 'RJ',2);
INSERT INTO ENDERECO VALUES(NULL,'RUA DO OUVIDOR', 'FLAMENGO', 'RIO DE JANIERO ', 'RJ',6);
INSERT INTO ENDERECO VALUES(NULL,'RUA URUGUAIANA', 'CENTRO', 'VITORIA', 'ES',5);

SELECT * FROM ENDERECO;

DESC TELEFONE; 

INSERT INTO TELEFONE VALUES(NULL, 'CEL', '54515144', 5);
INSERT INTO TELEFONE VALUES(NULL, 'RES', '54545245', 5);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '45452757', 1);
INSERT INTO TELEFONE VALUES(NULL, 'COM', '78567854', 2);
INSERT INTO TELEFONE VALUES(NULL, 'RES', '86786453', 1);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '45645378', 3);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '32423455', 3);
INSERT INTO TELEFONE VALUES(NULL, 'COM', '43534534', 1);
INSERT INTO TELEFONE VALUES(NULL, 'RES', '34534534', 5);
INSERT INTO TELEFONE VALUES(NULL, 'CEL', '65463453', 2);


SELECT NOME, SEXO, EMAILL, BAIRRO, CIDADE
FROM CLIENTE
INNER JOIN ENDERECO
ON IDCLIENTE = ID_CLIENTE
WHERE SEXO = 'F'; 



SELECT NOME, SEXO, EMAILL, TIPO, NUMERO
FROM CLIENTE 
 INNER JOIN TELEFONE
 ON IDCLIENTE = ID_CLIENTE;


SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
 INNER JOIN ENDERECO E
 ON C.IDCLIENTE =  E.ID_CLIENTE
 INNER JOIN TELEFONE T
 ON C.IDCLIENTE = T.ID_CLIENTE;


INSERT INTO CLIENTE VALUES (NULL, 'PAULA', 'M', NULL, '8785454541');
INSERT INTO ENDERECO VALUES (NULL, 'RUA JOAQUIM SILVA', 'ALVORADA', 'NITEROI', 'RJ', 8);

SELECT * FROM CLIENTE;


SELECT * FROM CLIENTE
WHERE SEXO = 'M'; 

SELECT * FROM CLIENTE 
WHERE IDCLIENTE = 8;


UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE = 8;

UPDATE CLIENTE
SET EMAILL = 'PAULA@HOTMAIL.COM'
WHERE IDCLIENTE = 8;

INSERT INTO CLIENTE VALUES (NULL, 'XXX', 'M', NULL, 'XXX');

DELETE FROM CLIENTE 
WHERE IDCLIENTE = 11; 

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_PRODUTO VARCHAR(30) NOT NULL,
	PRECO INT,
	FRETE FLOAT(10,2) NOT NULL
);

ALTER TABLE PRODUTO 
CHANGE PRECO VALOR_UNITARIO INT NOT NULL; 

ALTER TABLE CLIENTE
CHANGE EMAILL EMAIL VARCHAR(50) UNIQUE;

ALTER TABLE PRODUTO 
CHANGE VALOR_UNITARIO VALOR_UNITARIO INT; 


ALTER TABLE PRODUTO
MODIFY VALOR_UNITARIO VARCHAR(50) NOT NULL;


ALTER TABLE PRODUTO 
ADD PESO FLOAT(10,2)NOT NULL;

ALTER TABLE PRODUTO 
DROP COLUMN PESO;


ALTER TABLE PRODUTO 
ADD COLUMN PESO FLOAT(10,2) NOT NULL
AFTER NOME_PRODUTO;
  
ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOT NULL
FIRST;


DESC CLIENTE;
DESC ENDERECO;
DESC TELEFONE;

SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
       E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
       T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE


SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
       E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
       T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'M';

SELECT * FROM CLIENTE 
WHERE IDCLIENTE IN (12, 13, 18, 19);
 
UPDATE CLIENTE 
SET SEXO = 'F'
WHERE IDCLIENTE IN (12, 13, 18, 19);


SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
       E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
       T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'F';

UPDATE CLIENTE SET SEXO ='M' 
WHERE IDCLIENTE = 16;


SELECT COUNT(*) AS QUANTIDADE, SEXO FROM CLIENTE
GROUP BY SEXO;




/*ERRADO */
SELECT C.IDCLIENTE, C.SEXO, C.EMAIL, E.BAIRRO, E.ESTADO, T.TIPO
FROM CLIENTE C 
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE SEXO = 'F' AND (BAIRRO = 'CENTRO' AND ESTADO = 'RJ');
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE TIPO = 'RES';



SELECT C.IDCLIENTE, C.SEXO, C.EMAIL, C.NOME, T.TIPO, E.BAIRRO, E.CIDADE
FROM CLIENTE C 
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'F'
AND BAIRRO = 'CENTRO' AND CIDADE = 'RIO DE JANEIRO'
AND (TIPO = 'RES' OR TIPO = 'COM');




SELECT C.NOME, C.EMAIL, T.NUMERO AS CELULAR 
FROM CLIENTE C
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE ESTADO = 'RJ' AND TIPO = 'CEL';


SELECT C.NOME, C.EMAIL, T.NUMERO AS CELULAR , T.TIPO
FROM CLIENTE C
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE ESTADO = 'SP' AND TIPO = 'CEL' AND SEXO = 'F';


IFNULL()

SELECT C.NOME,
	IFNULL(C.EMAIL, 'NAO TEM EMAIL') AS 'EMAIL', 
	E.ESTADO, 
	T.NUMERO
FROM CLIENTE C 
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE;



SELECT C.NOME, 
	C.SEXO, 
	C.EMAIL, 
	T.TIPO, 
	T.NUMERO, 
	E.BAIRRO, 
	E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;


CREATE VIEW V_RELATORIO AS 
SELECT C.NOME, 
	C.SEXO, 
	IFNULL(C.EMAIL, 'CLIENTE SEM EMAIL') AS 'E-MAIL', 
	T.TIPO, 
	T.NUMERO, 
	E.BAIRRO, 
	E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;


SELECT NOME, NUMERO, ESTADO 
FROM V_RELATORIO;

INSERT INTO V_RELATORIO VALUES(
'ANDREIA', 'F','ANDREIA@UOL.COM.BR', 'CEL', '873547864', 'CENTRO', 'VITORIA', 'ES'
);

CREATE TABLE JOGADORES(
	IDJOGADOR INT, 
	NOME VARCHAR(30),
	ESTADO CHAR(2)
);

INSERT INTO JOGADORES VALUES(1, 'GUERRERO','RS');
INSERT INTO JOGADORES VALUES(2, 'GABIGOL','RJ');
INSERT INTO JOGADORES VALUES(3, 'GANSO','RJ');
INSERT INTO JOGADORES VALUES(4, 'NENÊ','RJ');
INSERT INTO JOGADORES VALUES(5, 'LOVE','SP');

CREATE VIEW V_JOGADORES AS 
SELECT NOME, ESTADO
FROM JOGADORES;


SELECT * FROM V_JOGADORES;

DELETE FROM V_JOGADORES
WHERE NOME = 'GUERRERO';

INSERT INTO V_JOGADORES VALUES('GUERRERO', 'RS');

SELECT * FROM V_RELATORIO
WHERE SEXO = 'F';

CREATE TABLE ALUNOS(
	NUMERO INT,
	NOME VARCHAR(30)
);

INSERT INTO ALUNOS VALUES(1, 'JOAO');
INSERT INTO ALUNOS VALUES(1, 'MARIA');
INSERT INTO ALUNOS VALUES(2, 'ZOE');
INSERT INTO ALUNOS VALUES(2, 'ANDRE');
INSERT INTO ALUNOS VALUES(3, 'CLARA');
INSERT INTO ALUNOS VALUES(1, 'CLARA');
INSERT INTO ALUNOS VALUES(4, 'MAFRA');
INSERT INTO ALUNOS VALUES(5, 'JANAINA');
INSERT INTO ALUNOS VALUES(1, 'JANAINA');
INSERT INTO ALUNOS VALUES(3, 'MARCELO');
INSERT INTO ALUNOS VALUES(4, 'GIOVANI');
INSERT INTO ALUNOS VALUES(5, 'ANTONIO');
INSERT INTO ALUNOS VALUES(6, 'ANA');
INSERT INTO ALUNOS VALUES(6, 'VIVIANE');


SELECT * FROM ALUNOS
ORDER BY  NUMERO, NOME;


SELECT C.NOME, 
	C.SEXO, 
	IFNULL(C.EMAIL, 'CLIENTE SEM EMAIL') AS 'E-MAIL', 
	T.TIPO, 
	T.NUMERO, 
	E.BAIRRO, 
	E.CIDADE, 
	E.ESTADO
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE
ORDER BY 1;

SHOW TABLES;

SELECT * FROM V_RELATORIO
ORDER BY 1;


DELIMITER $

CREATE PROCEDURE NOME()
BEGIN 


	QUALQUER PROGRAMACAO;



END
$


CREATE PROCEDURE NOME_EMPRESA()
BEGIN

	SELECT 'UNIVERSIDADE DOS DADOS' AS EMPRESA;

END 
$

CALL NOME_EMPRESA()$

DELIMITER ; 

CALL NOME_EMPRESA();


DELIMITER $

CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN

	SELECT NUMERO1 + NUMERO2 AS CONTA;

END 
$

CALL CONTA(100, 50)$


CREATE DATABASE PROJETO2;

USE PROJETO;

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	HORAS INT(3)NOT NULL,
	VALOR FLOAT(10,2)NOT NULL 
);


INSERT INTO CURSOS VALUES(NULL, 'JAVA', 30, 500.00);
INSERT INTO CURSOS VALUES(NULL, 'FUNDAMENTOS DE BANCO DE DADOS', 40, 700.00);

SELECT* FROM CURSOS;

DELIMITER #

STATUS 

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30), 
				P_HORAS INT(3),
				P_PRECO FLOAT(10,2))
BEGIN 
	
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);

END 
#

DELIMITER ;

CALL CAD_CURSO('BI SQL SERVER', 35, 3000.00);
CALL CAD_CURSO('POWER BI', 20, 1000.00);
CALL CAD_CURSO('TABLEAU', 30, 1200.00);
CALL CAD_CURSO('JAVASCRIPT', 25, 2200.00);
CALL CAD_CURSO('PYTHON', 26, 1300.00);
CALL CAD_CURSO('C#', 34, 1400.00);


DELIMITER #

CREATE PROCEDURE CON_CURSO()

BEGIN 

	SELECT NOME, HORAS, VALOR FROM CURSOS;

END
#

CREATE DATABASE VENDAS;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT(10,2),
	MARCO FLOAT(10,2)
);

SELECT MAX(FEVEREIRO) AS MAIOR_FEV 
FROM VENDEDORES;



SELECT MIN(FEVEREIRO) AS MENOR_FEV 
FROM VENDEDORES;


SELECT AVG(FEVEREIRO) AS MEDIA_FEV 
FROM VENDEDORES;

SELECT MAX(JANEIRO) AS MAX_JAN,
	MIN(JANEIRO) AS MIN_JAN,
	TRUNCATE(AVG(JANEIRO),2) AS MEDIA_JAN
FROM VENDEDORES;


SELECT SUM(JANEIRO) AS TOTAL_JAN,
       SUM(FEVEREIRO) AS TOTAL_FEV,
        SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;


SELECT SEXO, SUM(MARCO) AS TOTAL_MARCO
FROM VENDEDORES
GROUP BY SEXO;



SELECT MIN(MARCO) FROM VENDEDORES;

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO > (SELECT AVG(MARCO) FROM VENDEDORES);

SELECT NOME, FEVEREIRO FROM VENDEDORES
WHERE FEVEREIRO > (SELECT AVG(FEVEREIRO) FROM VENDEDORES);

SELECT AVG(FEVEREIRO) FROM VENDEDORES;

SELECT NOME, FEVEREIRO FROM VENDEDORES
WHERE FEVEREIRO < (SELECT AVG(FEVEREIRO) FROM VENDEDORES);


SELECT NOME,
	JANEIRO,
	FEVEREIRO,
	MARCO,
	(JANEIRO+FEVEREIRO+MARCO) AS 'TOTAL',
	(JANEIRO+FEVEREIRO+MARCO) * .25 AS 'DESCONTO',
	TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS 'MEDIA'
	FROM VENDEDORES;


CREATE TABLE TABELA(
	COLUNA1 VARCHAR(30),
	COLUNA2 VARCHAR(30),
	COLUNA3 VARCHAR(30)
);

ALTER TABLE TABELA
ADD PRIMARY KEY (COLUNA1);

ALTER TABLE TABELA
ADD COLUNA VARCHAR(30);
	
ALTER TABLE TABELA
ADD COLUNA100 INT;
	
ALTER TABLE TABELA
ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
AFTER COLUNA3; 

ALTER TABLE TABELA MODIFY COLUNA2 DATE NOT NULL; 

CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
);


ALTER TABLE TABELA
RENAME PESSOA;

ALTER TABLE TIME 
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COLUNA1);

SHOW CREATE TABLE TIME;

CREATE TABLE JOGADOR(
	IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30)
);

CREATE TABLE TIMES(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	NOMETIME VARCHAR(30),
	ID_JOGADOR INT,
	FOREIGN KEY(ID_JOGADOR)
	REFERENCES JOGADOR(IDJOGADOR)
);


INSERT INTO JOGADOR VALUES(NULL,'GUERRERO');
INSERT INTO TIMES VALUES(NULL, 'FLAMENGO',1);

SHOW CREATE TABLE JOGADOR;
SHOW CREATE TABLE TIMES; 




CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL, 
	ID_CLIENTE INT
);



ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);


USE INFORMATION_SCHEMA;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS 'BANCO',
 	TABLE_NAME AS 'TABELA',
 	CONSTRAINT_NAME AS 'NOME REGRA',
 	CONSTRAINT_TYPE AS 'TIPO'
 	FROM TABLE_CONSTRAINTS
 	WHERE CONSTRAINT_SCHEMA = 'VENDAS';

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE; 

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);



/* OFFICINA DO JOSÉ */

CREATE DATABASE PROJETO;

CREATE DATABASE OFICINA;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F')NOT NULL,
	ID_CARRO INT UNIQUE
);

CREATE TABLE CARRO(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MODELO VARCHAR(30) NOT NULL,
	PLACA VARCHAR(30) NOT NULL UNIQUE,
	ID_MARCA INT	
);	

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	NUMERO VARCHAR(30) NOT NULL,
	TIPO ENUM('CEL', 'RES', 'COM') NOT NULL,
	ID_CLIENTE INT
);

CREATE TABLE COR(
	IDCOR INT PRIMARY KEY AUTO_INCREMENT,
	COR VARCHAR(30) UNIQUE
);

CREATE TABLE MARCA(
	IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
	MARCA VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO_COR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY(ID_CARRO,ID_COR)
);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CLIENTE ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY(ID_CARRO) REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO 
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY(ID_MARCA)
REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR 
FOREIGN KEY(ID_COR)
REFERENCES COR(IDCOR);

ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_CARRO 
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

INSERT INTO MARCA VALUES(NULL,'FIAT');
INSERT INTO MARCA VALUES(NULL,'FORD');
INSERT INTO MARCA VALUES(NULL,'TOYOTA');
INSERT INTO MARCA VALUES(NULL,'VOLKSWAGEN');
INSERT INTO MARCA VALUES(NULL,'HONDA');
INSERT INTO MARCA VALUES(NULL,'HYUNDAI');
INSERT INTO MARCA VALUES(NULL,'NISSAN');
INSERT INTO MARCA VALUES(NULL,'CHEVROLET');
INSERT INTO MARCA VALUES(NULL,'KIA');
INSERT INTO MARCA VALUES(NULL,'MARCEDES-BENZ');


INSERT INTO CARRO VALUES(NULL,'ONIX','78SKDKK1',1);
INSERT INTO CARRO VALUES(NULL,'ONIX PLUS','7321SKK1',2);
INSERT INTO CARRO VALUES(NULL,'CRUZE','831342K1',5);
INSERT INTO CARRO VALUES(NULL,'SPIN','93681SKK1',8);
INSERT INTO CARRO VALUES(NULL,'CAMARO','976422KK1',4);
INSERT INTO CARRO VALUES(NULL,'BOLT EV','5321SKK1',9);
INSERT INTO CARRO VALUES(NULL,'CHEVETE','4321SKAK1',6);
INSERT INTO CARRO VALUES(NULL,'ONIX PLUS','7321SKK1',3);
INSERT INTO CARRO VALUES(NULL,'TRACKER','7321SP0K1',7);
INSERT INTO CARRO VALUES(NULL,'UNO','2321SP0K1',10);


INSERT INTO CLIENTE VALUES(NULL,'CRISTINA','F',2);
INSERT INTO CLIENTE VALUES(NULL,'JOSÉ','M',13);
INSERT INTO CLIENTE VALUES(NULL,'MARCOS','M',5);
INSERT INTO CLIENTE VALUES(NULL,'PEDRO','M',3);
INSERT INTO CLIENTE VALUES(NULL,'JOÃO','M',4);
INSERT INTO CLIENTE VALUES(NULL,'JULIA','F',7);
INSERT INTO CLIENTE VALUES(NULL,'CELIA','F',8);
INSERT INTO CLIENTE VALUES(NULL,'LETICIA','F',11);
INSERT INTO CLIENTE VALUES(NULL,'ISABELLA','F',12);
INSERT INTO CLIENTE VALUES(NULL,'MARIA','F',9);

INSERT INTO TELEFONE VALUES(NULL,'923374642','CEL',1);
INSERT INTO TELEFONE VALUES(NULL,'923374612','RES',3);
INSERT INTO TELEFONE VALUES(NULL,'923374615','CEL',5);
INSERT INTO TELEFONE VALUES(NULL,'823374663','COM',2);
INSERT INTO TELEFONE VALUES(NULL,'924374623','RES',6);
INSERT INTO TELEFONE VALUES(NULL,'924374643','CEL',7);
INSERT INTO TELEFONE VALUES(NULL,'948387382','COM',10);
INSERT INTO TELEFONE VALUES(NULL,'924374623','CEL',11);
INSERT INTO TELEFONE VALUES(NULL,'42I384876','RES',14);
INSERT INTO TELEFONE VALUES(NULL,'984773762','RES',12);

INSERT INTO COR VALUES(NULL,'VERMELHO');
INSERT INTO COR VALUES(NULL,'AZUL');
INSERT INTO COR VALUES(NULL,'PRETO');
INSERT INTO COR VALUES(NULL,'BRANCO');
INSERT INTO COR VALUES(NULL,'CINZA');
INSERT INTO COR VALUES(NULL,'AMARELO');
INSERT INTO COR VALUES(NULL,'PRATA');
INSERT INTO COR VALUES(NULL,'CROMA');
INSERT INTO COR VALUES(NULL,'ROSA');
INSERT INTO COR VALUES(NULL,'DOURADO');


INSERT INTO CARRO_COR VALUES(2,6);
INSERT INTO CARRO_COR VALUES(4,2);
INSERT INTO CARRO_COR VALUES(5,4);
INSERT INTO CARRO_COR VALUES(6,5);
INSERT INTO CARRO_COR VALUES(7,8);
INSERT INTO CARRO_COR VALUES(8,10);
INSERT INTO CARRO_COR VALUES(9,7);
INSERT INTO CARRO_COR VALUES(11,3);
INSERT INTO CARRO_COR VALUES(12,9);
INSERT INTO CARRO_COR VALUES(13,1);

CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN -> INICIO
	
	QUALQUER COMANDO SQL

END -> FIM

CREATE DATABASE AULA40;

USE AULA40;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(100),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);


DELIMITER $

CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW 
BEGIN 

	
	INSERT INTO BKP_USUARIO VALUES
	(NULL,OLD.IDUSUARIO, OLD.NOME, OLD.LOGIN);
	

END 
$


INSERT INTO USUARIO VALUES(NULL, 'ANDRADE','ANDRADE2009','HEXACAMPEAO');


CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBKP INT  PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE', 0.0);

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO 
FOR EACH ROW 
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,
	NEW.NOME,NEW.VALOR);

END	
$

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;

DELETE FROM PRODUTO WHERE IDPRODUTO = 2;

DELIMITER $

INSERT INTO PRODUTO VALUES(NULL,'LIVRO C#',100.00);

ALTER TABLE BACKUP.BKP_PRODUTO 
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP_PRODUTO_DEL;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO 
FOR EACH ROW 
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,
	OLD.NOME,OLD.VALOR,'D');

END	
$


DELETE FROM PRODUTO WHERE IDPRODUTO = 3;
DELETE FROM PRODUTO WHERE IDPRODUTO = 1;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_INS
AFTER INSERT ON PRODUTO 
FOR EACH ROW 
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,
	NEW.NOME,NEW.VALOR,'I');

END	
$

INSERT INTO PRODUTO VALUES(NULL,'LIVRO JAVASCRIPT', 100.00);

DROP TRIGGER BACKUP_PRODUTO_INS;


CREATE DATABASE LOJA;

CREATE DATABASE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)
);

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',80.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO ORACLE',70.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL SERVER',100.00);

SELECT CURRENT_USER();

DELIMITER $ 

CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW 
BEGIN 

	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, OLD.IDPRODUTO, OLD.NOME, 
	OLD.VALOR, NEW.VALOR, NOW(), CURRENT_USER() ,'U');

END
$

UPDATE PRODUTO SET VALOR = 110.00
WHERE IDPRODUTO = 4;

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELLIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAM',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,NULL);

SELECT * FROM CURSOS;


UPDATE CURSOS
SET ID_PREREQ = 4
WHERE IDCURSO = 5;

SELECT NOME, VALOR, HORAS, IFNULL(ID_PREREQ, 'SEM REQ') REQUESITO
FROM CURSOS; 


SELECT C.NOME AS CURSO, 
	C.VALOR AS VALOR, 
	C.HORAS AS CARGA, 
IFNULL(P.NOME, '---') AS REQUESITO
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;


CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL, 'MAFRA', 324543,234534,5534545);
INSERT INTO VENDEDORES VALUES(NULL, 'CLARA', 325356,24245632344,5347545);
INSERT INTO VENDEDORES VALUES(NULL, 'JOAO', 32432,242323,54432345);
INSERT INTO VENDEDORES VALUES(NULL, 'LILIAN', 32234,232334,543245);
INSERT INTO VENDEDORES VALUES(NULL, 'ANTONIO', 32432,242234,234545);
INSERT INTO VENDEDORES VALUES(NULL, 'GLORIA', 32432,532334,324545);

SELECT * FROM VENDEDORES;

SELECT NOME,(JAN+FEV+MAR)AS TOTAL FROM VENDEDORES;
SELECT NOME,(JAN+FEV+MAR)AS TOTAL, (JAN+FEV+MAR)/3 AS MEDIA FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT,
	TOTAL INT,
	MEDIA INT
);

DELIMITER $

CREATE PROCEDURE INSEREDADOS()
BEGIN

	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
	DECLARE VNOME VARCHAR(50);

	DECLARE REG CURSOR FOR(
		SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
	);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;

	OPEN REG;

	REPEAT

		FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
		IF NOT FIM THEN

			SET VTOTAL = VAR1+VAR2+VAR3;
			SET VMEDIA = VTOTAL/3;


			INSERT INTO VEND_TOTAL VALUES(VNOME, VAR1,VAR2, VAR3, VTOTAL, VMEDIA);
		END IF;

	UNTIL FIM END REPEAT;

	CLOSE REG;

END
$

SELECT * FROM VENDEDORES;
SELECT * FROM VEND_TOTAL;

DELIMITER ;

CALL INSEREDADOS();


CREATE DATABASE CONSULTORIO;

USE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT;
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
):


/* MODULO POSTGRE */


/* FUNÇÕES DE AGREGAÇÃO */

/* QUERY SIMPLES */

SELECT * FROM FUNCIONARIS;



/* CONTANDO O NÚMERO DE OCORRENCIAS */
SELECT COUNT(*) FROM FUNCIONARIOS; 
SELECT COUNT(*) FROM DEPARTAMENTOS;
SELECT COUNT(*) FROM LOCALIZACAO;



/* AGRUPANDO POR SEXO COM GROUP BY */

SELECT COUNT(*) FROM FUNCIONARIOS
GROUP BY SEXO;



/* COLOCANDO O NOME DA COLUNA */

SELECT SEXO, COUNT(*) AS "QUANTIDADE" FROM FUNCIONARIOS
GROUP BY SEXO;



/* MOSTRANDO O NUMERO DE FUNCIONARIOS EM CADA DEPARTAMENTO */

SELECT DEPARTAMENTO, COUNT(*) AS "QUANTIDADE" FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;



/* EXIBINDO O MAXIMO DE SALARIOS - 149929*/

SELECT MAX(SALARIO) AS "SALARIO_MAXIMO" FROM FUNCIONARIOS;



/* EXIBINDO O MINIMO DE SALARIO - 40138 */

SELECT MIN(SALARIO) AS "SALARIO_MIN" FROM FUNCIONARIOS



/* EXIBINDO O MAXIMO E O MINIMO JUNTOS */ 

SELECT MIN(SALARIO) AS "SALARIO_MINIMO", MAX(SALARIO) AS "SALARIO_MAXIMO" FROM FUNCIONARIOS;


/* EXIBINDO O MAXIMO E O MINIMO DE CADA DEPARTAMENTO */

SELECT DEPARTAMENTO, MIN(SALARIO) AS "SALARIO_MINIMO", 
MAX(SALARIO) AS "SALARIO_MAXIMO" 
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;


/* EXEIBINDO O MAXIMO E O MINIMO POR SEXO */

SELECT SEXO, MIN(SALARIO) AS "SALARIO_MINIMO", 
MAX(SALARIO) AS "SALARIO_MAXIMO" 
FROM FUNCIONARIOS
GROUP BY SEXO;

/* ESTASTISTICAS */


/* MOSTRANDO UMA QUANTIDADE LIMITADE DE LINHAS */

SELECT * FROM FUNCIONARIOS
LIMIT 10;

/* QUAL O GASTO TOTAL DE SALARIO GASTO PELA EMPRESA */

SELECT SUM (SALARIO) FROM FUNCIONARIOS;

/* QUAL O MONTANTE TOTAL QUE CADA DEPARTAMENTO RECEBE DE SALARIO */

SELECT DEPARTAMENTO, SUM(SALARIO) FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;

/* POR DEPARTAMENTO QUAL O TOTAL E A MEDIA PARA OS FUNCIONARIOS */

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO) FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;

/* ORDENADO */

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO) 
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO
ORDER BY 3;

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO) 
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO
ORDER BY 3 ASC;

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO) 
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO
ORDER BY 3 DESC;



/* DATA SCIENCIE */

/* importando CSV */

CREATE TABLE MAQUINAS(
	MAQUINA VARCHAR(20),
	DIA INT,
	QTD NUMERIC(10,2)
);

COPY MAQUINAS
FROM 'C:\script\LogMaquinas.csv'
DELIMITER ','
CSV HEADER; 

SELECT * FROM MAQUINAS;

/* QUAL A MEDIA DE CADA MAQUINA */

SELECT MAQUINA, AVG(QTD) AS MEDIA_QTD 
FROM MAQUINAS
GROUP BY MAQUINA;
ORDER BY 2 DESC

/* ARREDONDANDO */

ROUND(COLUNA,2 )

SELECT MAQUINA, ROUND (AVG(QTD),2) AS MEDIA_QTD 
FROM MAQUINAS
GROUP BY MAQUINA
ORDER BY 2 DESC; 

/* QUAL A MODA DAS QUANTIDADES */

SELECT MAQUINA, QTD, COUNT(*) AS MODA 
FROM MAQUINAS
GROUP BY MAQUINA, QTD
ORDER BY 3 DESC;

/* QUAL A MODA DAS QUANTIDADES DE CADA MAQUINA */

SELECT MAQUINA, QTD, COUNT(*) FROM MAQUINAS
WHERE MAQUINA = 'Maquina 01'
GROUP BY MAQUINA, QTD
ORDER BY 3 DESC
LIMIT 1;

SELECT MAQUINA, QTD, COUNT(*) FROM MAQUINAS
WHERE MAQUINA = 'Maquina 02'
GROUP BY MAQUINA, QTD
ORDER BY 3 DESC
LIMIT 1;

SELECT MAQUINA, QTD, COUNT(*) FROM MAQUINAS
WHERE MAQUINA = 'Maquina 03'
GROUP BY MAQUINA, QTD
ORDER BY 3 DESC
LIMIT 1;

/* MODA DO DATASET INTEIRO */

SELECT QTD, COUNT(*) AS MODA 
FROM MAQUINAS
GROUP BY QTD
ORDER BY 2 DESC; 

/* QUAL O MAXIMO E MINIMO E AMPLITUDE DE CADA MAQUINA */

SELECT MAQUINA,
	MAX(QTD) AS MAXIMO,
	MIN(QTD) AS MINIMO,
	MAX(QTD) - MIN(QTD) AS AMPLITUDE 
	FROM MAQUINAS
	GROUP BY MAQUINA 
	ORDER BY 4 DESC;

/* ACRESCENTE A MEDIA AO RELATORIO */

SELECT MAQUINA,
	ROUND (AVG(QTD),2) AS MEDIA,
	MAX(QTD) AS MAXIMO,
	MIN(QTD) AS MINIMO,
	MAX(QTD) - MIN(QTD) AS AMPLITUDE 
	FROM MAQUINAS
	GROUP BY MAQUINA 
	ORDER BY 4 DESC;

/* DESVIO PADRAO E VARIANCIA */

STDDEV_POP(COLUNA)
VAR_POP(COLUNA)

SELECT MAQUINA,
	ROUND (AVG(QTD),2) AS MEDIA,
	MAX(QTD) AS MAXIMO,
	MIN(QTD) AS MINIMO,
	MAX(QTD) - MIN(QTD) AS AMPLITUDE,
	ROUND (STDDEV_POP(QTD)) AS DESV_PAD,
	ROUND (VAR_POP(QTD),2) AS VARIANCIA 
	FROM MAQUINAS
	GROUP BY MAQUINA 
	ORDER BY 4 DESC;

/* CALCULO DE VARIANCIA */

CREATE OR REPLACE FUNCTION _FINAL_MEDIAN(NUMERIC[])
	RETURNS NUMERIC AS 
$$
	SELECT AVG(VAL)
	FROM(
	SELECT VAL 
	FROM UNNEST($1) VAL
	ORDER BY 1
	LIMIT 2 - MOD(ARRAY_UPPER($1, 1),2)
	OFFSET CEIL(ARRAY_UPPER($1,1)/2.0) - 1
	) SUB;

$$
LANGUAGE 'sql' IMMUTABLE;

CREATE AGGREGATE MEDIAN(NUMERIC) (
  SFUNC=ARRAY_APPREND,
  STYPE=NUMERIC[],
  FINALFUNC= _FINAL_MEDIAN,
  INITCOND='{}'
);


SELECT MEDIAN(QTD) AS MEDIANA
FROM MAQUINAS;


SELECT MEDIAN(QTD) AS MEDIANA
FROM MAQUINAS
WHERE MAQUINA = 'Maquina 01';


SELECT MEDIAN(QTD) AS MEDIANA
FROM MAQUINAS
WHERE MAQUINA = 'Maquina 02';


SELECT MEDIAN(QTD) AS MEDIANA
FROM MAQUINAS
WHERE MAQUINA = 'Maquina 03';


INSERT INTO MAQUINAS VALUES('MAQUINA 01', 11,15.9);
INSERT INTO MAQUINAS VALUES('MAQUINA 02', 11,15.4);
INSERT INTO MAQUINAS VALUES('MAQUINA 03', 11,15.7);
INSERT INTO MAQUINAS VALUES('MAQUINA 01', 12,30);
INSERT INTO MAQUINAS VALUES('MAQUINA 02', 12,24);
INSERT INTO MAQUINAS VALUES('MAQUINA 03', 12,45);


/* FUNÇÃO E ANALISE DA MEDIANA NO ARQUIVO 02 - Funcao de Mediana.sql */

/*
	QUANTIDADE
	TOTAL
	MEDIA
	MAXIMO
	MINIMO
	AMPLITUDE 
*/

SELECT MAQUINA,
	COUNT(QTD) AS "QUANTIDADE",
	SUM(QTD) AS "TOTAL",
	ROUND(AVG(QTD),2) AS "MEDIA",
	MAX(QTD) AS "MAXIMO",
	MIN(QTD) AS "MINIMO",
	MAX(QTD) - MIN(QTD) AS "AMPLIT. TOTAL",
	ROUND(VAR_POP(QTD),2) AS "VARIANCIA",
	ROUND(STDDEV_POP(QTD),2) AS "DESV. PADRAO",
	ROUND(MEDIAN(QTD),2) AS "MEDIANA",
	ROUND((STDDEV_POP(QTD)/ AVG(QTD)) * 100,2) AS "COEF. VARIACAO"
	FROM MAQUINAS
	GROUP BY MAQUINA 
	ORDER BY 1;

/* MODA - MODE() WITHIN GROUP(ORDER BY COLUNA */

SELECT MODE() WITHIN GROUP(ORDER BY QTD) AS "MODA" FROM MAQUINAS;


SELECT MODE() WITHIN GROUP(ORDER BY QTD) AS "MODA" 
FROM MAQUINAS
GROUP BY MAQUINA;


SELECT MAQUINA,
	COUNT(QTD) AS "QUANTIDADE",
	SUM(QTD) AS "TOTAL",
	ROUND(AVG(QTD),2) AS "MEDIA",
	MAX(QTD) AS "MAXIMO",
	MIN(QTD) AS "MINIMO",
	MAX(QTD) - MIN(QTD) AS "AMPLIT. TOTAL",
	ROUND(VAR_POP(QTD),2) AS "VARIANCIA",
	ROUND(STDDEV_POP(QTD),2) AS "DESV. PADRAO",
	ROUND(MEDIAN(QTD),2) AS "MEDIANA",
	ROUND((STDDEV_POP(QTD)/ AVG(QTD)) * 100,2) AS "COEF. VARIACAO",
	MODE() WITHIN GROUP(ORDER BY QTD) AS "MODA"
	FROM MAQUINAS
	GROUP BY MAQUINA 
	ORDER BY 1;


/*UTILIZANDO O CASE*/

SELECT NOME, SEXO FORM FUNCIONARIOS;

SELECT NOME, CARGO,
CASE 
	WHEN CARGO = 'Financial advisor' THEN 'Condicao 01'
	WHEN CARGO = 'Structural Enginer' THEN 'Condicao 02'
	WHEN CARGO = 'Executive Secretary' THEN 'Condicao 03'
	WHEN CARGO = 'Sales Associative' THEN 'Condicao 04'
	ELSE 'OUTRAS CONDICOES'
END AS "CONDICOES"
FROM FUNCIONARIOS;

SELECT CARGO FROM FUNCIONARIOS;  




	
SELECT NOME,
CASE 
	WHEN SEXO = 'Masculino' THEN 'M'
	ELSE 'F'

END AS "SEXO"
FROM FUNCIONARIOs; 
		

/* UTILIZANDO VALORES BOOLEANOS */ 


SELECT NOME, CARGO, (SEXO = 'Masculino') AS Masculino 
FROM FUNCIONARIOS;


SELECT NOME, CARGO, (SEXO = 'Masculino') AS Masculino, (SEXO = 'Feminino') AS Feminino 
FROM FUNCIONARIOS;

/* Mesclando as tecnicas - VARIABLE DUMMY PYTHON */

SELECT NOME, CARGO,
CASE 
	WHEN (SEXO = 'Masculino') = true THEN 1
	ELSE 0
END AS "MASCULINO",
CASE 
	WHEN (SEXO = 'Feminino') = true THEN 1
	ELSE 0
END AS "FEMININO"
FROM FUNCIONARIOS;


/*Filtros de Grupo*/

/* FILTROS BASEADOS EM VALORES */

SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE SALARIO > 100000;

SELECT NOME, DEPARTAMENTO
FROM FUNCIONARIOS
WHERE SALARIO > 100000;

/* FILTROS BASEADOS EM STRINGS */

SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas'

SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'FERRAMENTAS'

/* FILTROS BASEADOS EM MULTIPLAS COLUNAS E TIPOS - CONSIDERAR OR E AND */

SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas'
AND 
SALARIO > 100000;

/* FILTRO BASEADO EM UNICO TIPO E COLUNA - ATENCAO PARA A REGRA DO AND E OR 
em relacionamentos 1 x 1 o filtro and tratando de uma unica coluna sempre dará falso*/


SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas'
AND 
DEPARTAMENTO = 'Books' 

/* FILTROS BASEADOS EM PADRAO DE CARACTERES */

SELECT DEPARTAMENTO, SUM(SALARIO) AS "total"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%'
GROUP BY DEPARTAMENTO;

/* FILTROS BASEADOS EM PADRAO DE CARACTERES COM MAIS LETRAS */

SELECT DEPARTAMENTO, SUM(SALARIO) AS "total"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'Be%'
GROUP BY DEPARTAMENTO;

/* UTILIZANDO O CARACTER CORINGA NO MEIO DA PALAVRA*/

SELECT DEPARTAMENTO, SUM(SALARIO) AS "total"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%s'
GROUP BY DEPARTAMENTO;

/* E se eu quisesse filtrar o agrupamento pelo salario?
por exemplo, maior que 40.000.00 
COLUNAS NAO AGREGADAS - WHERE
COLUNAS AGREGADAS - HAVING
*/

/* ERRADA*/
SELECT DEPARTAMENTO, SUM(SALARIO) AS "total"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%' AND SUM(SALARIO) > 4000000
GROUP BY DEPARTAMENTO;

SELECT DEPARTAMENTO, SUM(SALARIO) AS "total"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%'
GROUP BY DEPARTAMENTO;

SELECT DEPARTAMENTO, SUM(SALARIO) AS "total"
FROM FUNCIONARIOS
WHERE 
DEPARTAMENTO LIKE 'B%'
GROUP BY DEPARTAMENTO
HAVING SUM(SALARIO) > 4000000;


/* MULTIPLOS CONTADORES */

SELECT COUNT(*) FROM FUNCIONARIOS;

SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT('Masculino') as "Masculino"
FROM FUNCIONARIOS;


SELECT SEXO, COUNT(*)
FROM FUNCIONARIOS
WHERE SEXO = 'Masculino'
GROUP BY SEXO;

/*ERRADA*/
SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT(SELECT SEXO, COUNT(*)
FROM FUNCIONARIOS
WHERE SEXO = 'Masculino'
GROUP BY SEXO) as "Masculino"
FROM FUNCIONARIOS;

/*ERRADA*/
SELECT COUNT(*) AS "QUANTIDADE TOTAL",
(SELECT SEXO, COUNT(*)
FROM FUNCIONARIOS
WHERE SEXO = 'Masculino'
GROUP BY SEXO) as "Masculino"
FROM FUNCIONARIOS;

/* DEGRADA A PERFORMACE */
SELECT COUNT(*) AS "QUANTIDADE TOTAL",
(SELECT COUNT(*)
FROM FUNCIONARIOS
WHERE SEXO = 'Masculino'
GROUP BY SEXO) as "Masculino"
FROM FUNCIONARIOS;

/* FORMA FÁCIL */

SELECT COUNT(*) AS "QUANTIDADE  TOTAL",
COUNT(*) FILTER(WHERE SEXO = 'Masculino') AS "MASCULINO",
COUNT(*) FILTER(WHERE DEPARTAMENTO = 'Books') AS "Books",
COUNT(*) FILTER(WHERE SALARIO > 140000) AS "SALARIO > 140K"
FROM FUNCIONARIOS; 

/* Reformatando Strings */

/* listando */

SELECT DEPARTAMENTO FROM FUNCIONARIOS;

/* distinct */

SELECT DISTINCT DEPARTAMENTO FROM FUNCIONARIOS;


/* UPPER CASE */

SELECT DISTINCT UPPER(DEPARTAMENTO) FROM FUNCIONARIOS;

/* LOWER CASE */

SELECT DISTINCT LOWER(DEPARTAMENTO) FROM FUNCIONARIOS;

/* CONCATENANDO STRINGS */ 

SELECT CARGO || ' - ' ||  DEPARTAMENTO 
FROM FUNCIONARIOS;

SELECT UPPER(CARGO || ' - ' ||  DEPARTAMENTO) AS "Cargo Completo"
FROM FUNCIONARIOS;

/* Remover espacos */

SELECT '     UNIDADOS    ';

/* CONTANDO CARACTERES */

SELECT LENGTH('     UNIDADOS    ');

/* APLICANDO TRIM */

SELECT TRIM('     UNIDADOS    ');


/* DESAFIO - CRIAR UMACOLUNA AO LADO DA COLUNA CARGO QUE DIGA SE A PESSOA É ASSISTENTE OU NÃO */


SELECT NOME, CARGO,
CASE 
	WHEN (CARGO LIKE 'Assistant%') = true THEN 'Sim'
	ELSE 'Nao' 
END AS "Assistente?"
FROM FUNCIONARIOS;








/*MODULO ORACLE */


--USUARIO DO BANCO DE DADOS 

SHOW USER;

--TABELA DUMMY - IDIOTA 

SELECT 1 + 1;

SELECT 1 + 1 AS SOMA FROM DUAL; --FAÇAM DESSA FORMA

SELECT 1 + 1 SOMA FROM DUAL;

--VERIFICANDO O AMBIENTE 
--B023 -> BITS
--B047 -> BITS

SELECT METADATA FROM SYS.KOPM$;

--DICIONARIO DE DADOS 

SELECT * FROM DICT;


-- UNICA - RAC 
-- EU ESTOU UTILIZANDO PARALELISMO?
SELECT PARALLEL FROM V$INSTANCE;

--ESTRUTURAS DE MEMORIA
SELECT COMPONENT, CURRENT_SIZE, MIN_SIZE, MAX_SIZE
FROM V$SGA_DYNAMIC_COMPONENTS;

--- CONECTANDO A OUTRO BANCO DE DADOS 

SQLPLUS SYSTEM/SENHA@NOMEDOBANCO
ORACLE_SID=

-- NOME DO BANCO DE DADOS 

SELECT NAME FROM V$DATABASE;

--VERSAO DO BANCO  

SELECT BANNER FROM V$VERSION;

--VERIFICAR PREVILEGIOS DOS USUARIOS 

SELECT * FROM USER_SYS_PRIVS;

--TABELAS DO USUARIO 

SELECT TABLE_NAME FROM USER_TABLES;


/* 
ARMAZENAMENTO
LOGICO - TABLESPACES -> SEGMENTOS(OBJETOS) -> 
EXTENSOES (ESPAÇO) -> BLOCOS (DO SISTEMA OPERACIONAL)

FISICO -> DATAFILES
*/

/* NAO PODEMOS DETERMINAR EM QUAL ARQUIVO FISICO UM OBJETO FICARÁ.
*/

CREATE TABLE cursos(
	IDCURSO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	CARGA INT
)TABLESPACE USERS;

CREATE TABLE TESTE(
	IDTESTE INT,
	NOME VARCHAR2(30)
);


/* dicionario de dados */

SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES;


SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES
WHERE TABLE_NAME = 'CURSOS';


SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES
WHERE TABLE_NAME = 'TESTE';

/* TODO OBJETO É CRIADO POR PADRAO NA TABLESPACE 
USERS EXECETO QUANDO SE ESTA LOGADO COM O USUARIO 
SYSTEM - ENTAO O OBJETO SERA CRIADO NA TABLESPACE SYSTEM */ 

SELECT SEGMENT_NAME, SEGMENT_TYPE, TABLESPACE_NAME,
BYTES, BLOCKS, EXTENTS FROM USER_SEGMENTS; 

SELECT SEGMENT_NAME, SEGMENT_TYPE, TABLESPACE_NAME,
BYTES, BLOCKS, EXTENTS FROM USER_SEGMENTS
WHERE SEGMENT_NAME ='CURSOS';

/* FORMATACAO DE COLUNAS */

COLUMN TABLESPACE_NAME FORMAT A10;
COLUMN SEGMENT_NAME FORMAT A10;
COLUMN SEGMENT_TYPE FORMAT A10;


CREATE TABLESPACE RECURSOS_HUMANOS 
DATAFILE 'C:/DATA/RH_01.DBF'
SIZE 100M AUTOEXTEND 
ON NEXT 100M
MAXSIZE 4096M;

ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE 'C:/DATA/RH_02.DBF'
SIZE 200M AUTOEXTEND 
ON NEXT 200M
MAXSIZE 4096M;

SELECT TABLESPACE_NAME, FILE_NAME FROM DBA_DATA_FILES;

--SEQUENCES 

CREATE SEQUENCE SEQ_GERAL
START WITH 100
INCREMENT BY 10;

--CRIANDO UMA TABELA NA TABLESPACE 

CREATE TABLE FUNCIONARIOS(
    IDFUNCIONARIO INT PRIMARY KEY,
    NOME VARCHAR2(30)
)TABLESPACE RECURSOS_HUMANOS;

INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'JOAO');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'CLARA');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'LILIAN');


SELECT * FROM FUNCIONARIOS;


